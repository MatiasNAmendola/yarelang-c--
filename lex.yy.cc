
#line 3 "lex.yy.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }
int yyFlexLexer::yylex()
	{
	LexerError( "yyFlexLexer::yylex invoked but %option yyclass used" );
	return 0;
	}

#define YY_DECL int FlexScanner::yylex()

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 105
#define YY_END_OF_BUFFER 106
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[269] =
    {   0,
        0,    0,    0,    0,    0,    0,  106,  104,   97,   98,
       96,   96,  104,   96,   96,   96,   96,   96,   96,   96,
       96,   96,    1,    1,   96,   96,   96,   96,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,   96,    2,  104,  105,
      101,  103,  102,   37,    0,   90,    0,    0,   91,    0,
       52,   38,   55,   50,   48,    0,   49,    0,    0,    0,
        0,    0,   99,    0,   51,    0,    1,    0,    0,   88,
       87,    0,   57,   89,    0,   46,   35,   36,   34,   47,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,   22,    0,    0,    0,    0,    0,   23,    0,    0,
        0,   78,    0,    0,    0,    0,   31,   40,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   15,    0,    0,
       56,    0,   39,  101,  100,    4,    0,   95,   42,   45,
       44,    0,    0,    0,   92,    1,    5,    3,    0,   94,
       33,   53,   54,   68,    0,   18,   41,    0,    0,    0,
        0,    0,    0,   74,   13,    0,    0,    0,   76,    0,
        0,    0,   12,   14,   63,    0,    0,   30,   17,   20,
       31,   86,   65,    0,    0,    0,    0,    0,    0,   79,
        0,   19,    0,   81,    0,   29,    0,   43,    0,    6,

       70,   71,   72,    0,    8,   73,    0,   75,    0,   24,
        0,    0,    0,    0,    0,    0,   16,    0,    7,   85,
       11,   28,   26,   80,   69,    0,   82,    0,    0,   93,
       25,    0,    0,   66,    0,   77,   62,   60,   58,   64,
       10,   27,    0,   21,    0,    0,    0,    0,    0,    9,
        0,   32,   67,    0,    0,    0,    0,    0,    0,    0,
        0,   83,    0,    0,   84,   61,   59,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    7,    8,    9,   10,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   21,   15,   22,
       23,   24,   25,   26,   27,   28,   29,   30,   31,   32,
       33,   34,   35,   36,   37,   38,   39,   40,   41,   42,
       43,   44,   45,   46,   47,   48,   49,   50,   51,   36,
       52,   53,   54,   55,   10,    1,   27,   28,   29,   30,

       56,   32,   57,   34,   35,   36,   37,   58,   59,   60,
       41,   42,   61,   62,   45,   63,   47,   48,   49,   50,
       51,   36,   15,   64,   15,   15,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[65] =
    {   0,
        1,    2,    3,    1,    2,    2,    1,    1,    1,    2,
        2,    2,    4,    2,    1,    2,    2,    2,    5,    5,
        2,    1,    2,    1,    1,    2,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    1,    2,    1,    2,    5,    5,    5,    5,    5,
        5,    5,    5,    2
    } ;

static yyconst flex_int16_t yy_base[281] =
    {   0,
        0,    0,    0,    0,   62,   63,  435,  436,  436,  436,
      411,   62,  430,    0,  409,   59,  436,  408,  407,   54,
      412,   56,   66,   61,   76,   68,  405,   48,   73,   45,
       65,   64,   84,   71,  436,   95,  101,  112,  386,   64,
      104,  119,  127,   90,  392,  384,  401,  129,  359,  436,
        0,  436,  404,  436,  118,  436,  418,  417,  436,  412,
      436,  436,  436,  436,  436,  415,  436,  356,  353,  352,
      358,  396,  436,  409,  436,   74,  159,  162,  126,  142,
      146,  408,  436,  163,  386,  386,  436,  436,  436,  385,
      362,  365,  375,  374,  368,  375,   69,  139,  366,  155,

      371,  436,  142,   91,  357,  369,  356,  436,  349,  366,
      150,  436,  154,  161,  172,  165,  161,  436,  164,  169,
      166,  174,  367,  176,  165,  189,  179,  436,  358,  178,
      436,  198,  436,    0,  436,  385,  388,  436,  436,  436,
      436,  329,  113,  386,  436,  211,  222,  436,  385,  436,
      436,  436,  436,  436,  342,  436,  436,  195,  198,  359,
      205,  206,  340,  350,  436,  335,  206,  203,  436,  210,
      341,  354,  436,  436,  436,  339,  338,  436,  214,  436,
      436,  436,  436,  206,  349,  343,  331,  345,  344,  339,
      213,  436,  345,  337,  222,  436,  367,  436,  147,  436,

      436,  436,  436,  311,  436,  436,  221,  436,  320,  436,
      230,  302,  225,  230,  227,  230,  436,  231,  436,  436,
      436,  436,  300,  436,  436,  233,  436,  241,  335,  436,
      436,  297,  282,  436,  237,  436,  436,  275,  271,  436,
      242,  436,  264,  436,    0,  263,  268,  250,  252,  436,
      246,    0,  436,  274,  253,  251,  198,  253,  205,  153,
       77,  436,  255,  257,  436,  436,  436,  436,  315,  320,
      325,  330,  335,  339,  344,  349,  354,  359,  364,   68
    } ;

static yyconst flex_int16_t yy_def[281] =
    {   0,
      268,    1,  269,  269,  270,  270,  268,  268,  268,  268,
      268,  271,  272,  273,  268,  268,  268,  268,  268,  268,
      268,  268,  268,  268,  274,  268,  268,  268,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  268,  268,
      275,  268,  268,  268,  271,  268,  271,  272,  268,  273,
      268,  268,  268,  268,  268,  276,  268,  268,  268,  268,
      268,  268,  268,  277,  268,  268,  268,  268,  274,  274,
      274,  278,  268,  274,  268,  268,  268,  268,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  268,  268,

      268,  268,  268,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  268,  275,  268,  273,  276,  268,  268,  268,
      268,  268,  268,  277,  268,  268,  268,  268,  278,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  268,  268,  268,  268,  279,  268,  268,  268,

      268,  268,  268,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  279,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  268,  268,  280,  268,  268,  268,  268,  268,
      268,  280,  268,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  268,  268,  268,  268,  268,    0,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  268,  268
    } ;

static yyconst flex_int16_t yy_nxt[501] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,   15,   16,    8,
       17,   17,   18,   19,   17,   20,   21,   22,   23,   24,
       25,   26,   27,   28,   17,   17,   29,   30,   31,   32,
       33,   34,   35,   35,   36,   35,   35,   37,   38,   39,
       40,   41,   35,   42,   43,   44,   35,   35,   45,   46,
       35,   17,    8,   17,   47,   33,   35,   37,   38,   39,
       35,   48,   44,   49,   52,   52,   56,   62,   73,   66,
       89,   90,  252,   74,   53,   53,   67,   76,   75,   77,
       77,   63,   76,   85,   77,   77,   80,   81,   97,   86,
       87,   98,  146,  146,  101,   99,   82,  106,   83,  160,

       91,   92,   93,  265,  102,  100,   97,  118,  107,   68,
       69,   70,   94,   71,   57,   78,  127,   95,   96,  101,
       99,  103,   56,  104,  160,  118,  108,  109,  107,  199,
      128,  111,   94,  105,  110,   96,  168,  200,  113,   84,
      112,  103,  114,  104,  119,  122,  148,  120,  268,  123,
      121,  109,  115,  168,  110,  122,  111,  111,  116,  123,
      112,  124,  148,  199,  268,  120,  148,  114,  268,  125,
       57,  200,  166,  126,  123,   76,  161,   77,   77,  264,
      147,  147,  111,  148,  132,  268,  167,  125,  147,  147,
      147,  147,  147,  147,  163,  174,  161,  166,  175,  164,

      177,  178,  180,  184,  176,  182,  181,  183,  191,  185,
      186,  187,  174,  188,  163,  190,  192,  147,  194,  179,
      177,  196,  180,  181,  189,  183,  191,  193,  187,  146,
      146,  263,  261,  188,  202,  190,  210,  203,  194,  196,
      147,  147,  205,  206,  217,  218,  211,  193,  147,  147,
      147,  147,  147,  147,  202,  212,  197,  203,  225,  228,
      234,  210,  205,  206,  211,  218,  232,  237,  236,  217,
      238,  244,  212,  239,  240,  225,  241,  147,  243,  228,
      247,  250,  255,  232,  256,  234,  236,  237,  238,  257,
      262,  239,  266,  241,  267,  243,  244,  260,  247,  259,

      258,  250,  254,  253,  251,  249,  255,  257,  256,  248,
      262,  246,  266,  245,  267,   50,   50,   50,   50,   50,
       51,   51,   51,   51,   51,   55,   55,   55,   55,   55,
       58,   58,   58,   58,   58,   60,   60,  230,   60,   60,
       79,  242,  235,   79,  134,  134,  233,  231,  134,  137,
      137,  137,  137,  137,  144,  144,  144,  144,  144,  149,
      149,  149,  149,  149,  229,  229,  229,  229,  229,  230,
      227,  226,  224,  223,  222,  221,  220,  219,  216,  215,
      214,  213,  209,  208,  207,  204,  201,  150,  145,  198,
      138,  136,  195,  189,  173,  172,  171,  170,  169,  165,

      162,  159,  158,  157,  156,  155,  154,  153,  152,  151,
      150,  145,  143,  142,  141,  140,  139,  138,  136,   59,
      268,  135,  133,  131,  130,  129,  117,   88,   72,   65,
       64,   61,   59,   54,  268,    7,  268,  268,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  268,  268

    } ;

static yyconst flex_int16_t yy_chk[501] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    5,    6,   12,   16,   22,   20,
       28,   28,  280,   22,    5,    6,   20,   24,   22,   24,
       24,   16,   23,   26,   23,   23,   25,   25,   30,   26,
       26,   31,   76,   76,   32,   31,   25,   34,   25,   97,

       29,   29,   29,  261,   32,   31,   30,   40,   34,   20,
       20,   20,   29,   20,   12,   23,   44,   29,   29,   32,
       31,   33,   55,   33,   97,   40,   36,   36,   34,  143,
       44,   37,   29,   33,   36,   29,  104,  143,   38,   25,
       37,   33,   38,   33,   41,   42,   79,   41,   79,   42,
       41,   36,   38,  104,   36,   48,   37,   43,   38,   48,
       37,   43,   80,  199,   80,   41,   81,   38,   81,   43,
       55,  199,  103,   43,   42,   77,   98,   77,   77,  260,
       78,   78,   43,   84,   48,   84,  103,   43,   78,   78,
       78,   78,   78,   78,  100,  111,   98,  103,  113,  100,

      114,  115,  116,  120,  113,  119,  117,  119,  125,  120,
      121,  121,  111,  122,  100,  124,  126,   78,  127,  115,
      114,  130,  116,  117,  132,  119,  125,  126,  121,  146,
      146,  259,  257,  122,  158,  124,  167,  159,  127,  130,
      147,  147,  161,  162,  179,  184,  168,  126,  147,  147,
      147,  147,  147,  147,  158,  170,  132,  159,  191,  195,
      211,  167,  161,  162,  168,  184,  207,  214,  213,  179,
      215,  228,  170,  216,  216,  191,  218,  147,  226,  195,
      235,  241,  248,  207,  249,  211,  213,  214,  215,  251,
      258,  216,  263,  218,  264,  226,  228,  256,  235,  255,

      254,  241,  247,  246,  243,  239,  248,  251,  249,  238,
      258,  233,  263,  232,  264,  269,  269,  269,  269,  269,
      270,  270,  270,  270,  270,  271,  271,  271,  271,  271,
      272,  272,  272,  272,  272,  273,  273,  229,  273,  273,
      274,  223,  212,  274,  275,  275,  209,  204,  275,  276,
      276,  276,  276,  276,  277,  277,  277,  277,  277,  278,
      278,  278,  278,  278,  279,  279,  279,  279,  279,  197,
      194,  193,  190,  189,  188,  187,  186,  185,  177,  176,
      172,  171,  166,  164,  163,  160,  155,  149,  144,  142,
      137,  136,  129,  123,  110,  109,  107,  106,  105,  101,

       99,   96,   95,   94,   93,   92,   91,   90,   86,   85,
       82,   74,   72,   71,   70,   69,   68,   66,   60,   58,
       57,   53,   49,   47,   46,   45,   39,   27,   21,   19,
       18,   15,   13,   11,    7,  268,  268,  268,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  268,  268

    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[106] =
    {   0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 
    0, 0, 0, 1, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "yare.l"
#line 2 "yare.l"
	#include "yare.tab.h"
	#include "YareScanner.h"
	#include "constantes.h"
	// XXX  #include "astnode.h"
	#include <cstring>
	#include <cctype>
	#include <cstdlib>
	#include <iostream>
	#include <cstdio>
	#include <cstring>

	void append_char(char *s, char c) {
    	unsigned int length = strlen(s);
    	s[length] = c;
    	s[length + 1] = '\0';
	}

	void remove_first_char(char *s) {
    	memmove(s, s + 1, strlen(s));
	}

	void remove_last_char(char *s) {
    	s[strlen(s) - 1] = '\0';
	}

	// Opvar:
	extern char opVar[4];
	using std::endl;
	using std::cout;
	using std::cerr;


#line 679 "lex.yy.cc"

#define INITIAL 0
#define STRING 1
#define IN_COMMENT 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 40 "yare.l"


#line 789 "lex.yy.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 269 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 436 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 42 "yare.l"
{
	lexema->valnum = strtold(yytext, NULL);
	return YL::YareParser::token::NUMERIC;
}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 47 "yare.l"
{
						// TODO Revisar esto con calma
	if(isupper(*yytext))
		lexema->sIndex = tolower(*yytext) - 'a';
	else
		lexema->sIndex = *yytext - 'a';
	return YL::YareParser::token::VARIABLE;
}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 56 "yare.l"
{
	strcpy(lexema->identificador, yytext);
	for(unsigned _i_ = 0; _i_ < strlen(lexema->identificador); _i_++)
		if(isalpha(lexema->identificador[_i_]) && isupper(lexema->identificador[_i_]))
			lexema->identificador[_i_] = tolower(lexema->identificador[_i_]);
	return YL::YareParser::token::ID;
}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 64 "yare.l"
{
	strcpy(lexema->nameFunction, yytext);
	lexema->nameFunction[strlen(lexema->nameFunction)] = '\0';
	return YL::YareParser::token::FUNCNAME;
}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 70 "yare.l"
{
	lexema->valnum = strtold(yytext, NULL);
	return YL::YareParser::token::NUMERIC;
}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 75 "yare.l"
{
	// 676 ...? 8729834, expr ...? expr
	return YL::YareParser::token::RANGE_RANDOM;
}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 80 "yare.l"
{
	return YL::YareParser::token::PROC;
}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 84 "yare.l"
{
	return YL::YareParser::token::CALL;
}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 88 "yare.l"
{
	return YL::YareParser::token::PRINTN;
}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 92 "yare.l"
{
	return YL::YareParser::token::PRINT;
}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 96 "yare.l"
{
	return YL::YareParser::token::PUTS;	
}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 100 "yare.l"
{
	return YL::YareParser::token::INC;
}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 104 "yare.l"
{
	return YL::YareParser::token::DEC;
}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 108 "yare.l"
{
	return YL::YareParser::token::LETSET_ASSIGN;
}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 112 "yare.l"
{
	return YL::YareParser::token::TO;
}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 116 "yare.l"
{
	return YL::YareParser::token::MOVE;
}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 120 "yare.l"
{
	// mov x, 1 + 2;
	return YL::YareParser::token::MOV_ASM;
}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 125 "yare.l"
{
	// dd x, 1+ 2 * 3;
	return YL::YareParser::token::ADD_ASM;
}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 130 "yare.l"
{
	// add x, 1+ 2 * 3;
	return YL::YareParser::token::SUB_ASM;
}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 135 "yare.l"
{
	// mul x, 2;
	return YL::YareParser::token::MUL_ASM;
}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 140 "yare.l"
{
	return YL::YareParser::token::WHILE;
}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 144 "yare.l"
{
	return YL::YareParser::token::DO;	
}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 148 "yare.l"
{
	return YL::YareParser::token::IF;
}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 152 "yare.l"
{
	return YL::YareParser::token::ELSE;
}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 156 "yare.l"
{
	return YL::YareParser::token::BREAK;
}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 160 "yare.l"
{
	return YL::YareParser::token::READ;	
}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 164 "yare.l"
{
	return YL::YareParser::token::READP;	
}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 168 "yare.l"
{
	return YL::YareParser::token::RAND;
}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 172 "yare.l"
{
	return YL::YareParser::token::XOROP;
}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 176 "yare.l"
{
	return YL::YareParser::token::MOD_WORD;
}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 180 "yare.l"
/* Expressions with WORDS */	{
	return YL::YareParser::token::EXPR_NOT;
}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 184 "yare.l"
{	
	char *__elemento = strtok(yytext, ".");
	__elemento = strtok(NULL, ".");

	for(unsigned i = 0; i < N_CONST; i++) {
		if(strcmp(__elemento, consts[i].const_str) == 0) {
			lexema->valnum  = consts[i].value;
			return YL::YareParser::token::NUMERIC; 
		}
	}
	cerr << "Error, constante no identificada 'const." << __elemento << "'\n";
	exit(EXIT_FAILURE);
}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 198 "yare.l"
{
	return YL::YareParser::token::SWAP_OP;
}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 202 "yare.l"
{
	// Greater or equal:
	return YL::YareParser::token::GE;
}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 207 "yare.l"
{
	// Less or equal:
	return YL::YareParser::token::LE;
}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 212 "yare.l"
{
	// Equal:
	return YL::YareParser::token::EQ;
}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 217 "yare.l"
{
	// Not equal:
	return YL::YareParser::token::NE;
}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 222 "yare.l"
{
	return YL::YareParser::token::AND;
}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 226 "yare.l"
{
	return YL::YareParser::token::OR;
}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 230 "yare.l"
{
	return YL::YareParser::token::OR;
}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 234 "yare.l"
{
	return YL::YareParser::token::AND;
}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 238 "yare.l"
{
	// Equal shell operator ==
	return YL::YareParser::token::EQ;
}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 243 "yare.l"
{
	// Not equal shell operator !=
	return YL::YareParser::token::NE;
}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 248 "yare.l"
{
	//  Less shell operator <
	return YL::YareParser::token::_LT_;
}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 253 "yare.l"
{
	//  Great shell operator >
	return YL::YareParser::token::_GT_;
}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 258 "yare.l"
{
	return YL::YareParser::token::SHIFTLEFT;
}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 262 "yare.l"
{					
	return YL::YareParser::token::SHIFTRIGHT; 
}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 266 "yare.l"
{
	return YL::YareParser::token::OP_ASIGN_ABR_MAS;
} 
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 270 "yare.l"
{
	return YL::YareParser::token::OP_ASIGN_ABR_MENOS;
}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 274 "yare.l"
{
	return YL::YareParser::token::OP_ASIGN_ABR_MUL;
}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 278 "yare.l"
{
	return YL::YareParser::token::OP_ASIGN_ABR_DIV;
}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 282 "yare.l"
{
	return YL::YareParser::token::OP_ASIGN_ABR_MOD;
}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 286 "yare.l"
{
	return YL::YareParser::token::OP_ASIGN_ABR_SHIFTLEFT;
}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 290 "yare.l"
{
	return YL::YareParser::token::OP_ASIGN_ABR_SHIFTRIGHT;
}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 294 "yare.l"
{
	return YL::YareParser::token::OP_ASIGN_ABR_AND;
}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 298 "yare.l"
{
	return YL::YareParser::token::OP_ASIGN_ABR_POW;
}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 302 "yare.l"
{
	return YL::YareParser::token::PASCAL_ASSIGN;
}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 306 "yare.l"
{
	// "menor"
	return YL::YareParser::token::EXPR_MENOR;
}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 311 "yare.l"
{
	// "menorigual"
	return YL::YareParser::token::EXPR_MENORIGUAL;
}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 316 "yare.l"
{
	// "mayor"
	return YL::YareParser::token::EXPR_MAYOR;
}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 321 "yare.l"
{
	// "mayorigual"
	return YL::YareParser::token::EXPR_MAYORIGUAL;
}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 326 "yare.l"
{
	return YL::YareParser::token::EXPR_IGUAL;	
}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 330 "yare.l"
{
	return YL::YareParser::token::EXPR_MAS;	
}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 334 "yare.l"
{
	return YL::YareParser::token::EXPR_MENOS;		
}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 338 "yare.l"
{
	return YL::YareParser::token::EXPR_MUL;			
}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 342 "yare.l"
{
	return YL::YareParser::token::EXPR_DIV;			
}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 346 "yare.l"
{
	return YL::YareParser::token::EXPR_ELEVADO;
}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 350 "yare.l"
{
	return YL::YareParser::token::ABS;	
}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 354 "yare.l"
{
	return YL::YareParser::token::SQRT;
}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 358 "yare.l"
{
	return YL::YareParser::token::ACOS;	
}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 362 "yare.l"
{
	return YL::YareParser::token::ASIN;	
}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 366 "yare.l"
{
	return YL::YareParser::token::ATAN;	
}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 370 "yare.l"
{
	return YL::YareParser::token::CEIL;	
}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 374 "yare.l"
{
	return YL::YareParser::token::COS;	
}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 378 "yare.l"
{
	return YL::YareParser::token::COSH;	
}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 382 "yare.l"
{
	return YL::YareParser::token::EXP;		
}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 386 "yare.l"
{
	return YL::YareParser::token::FLOOR;
}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 390 "yare.l"
{
	return YL::YareParser::token::LN;
}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 394 "yare.l"
{
	return YL::YareParser::token::SIN;
}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 398 "yare.l"
{
	return YL::YareParser::token::SINH;
}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 402 "yare.l"
{
	return YL::YareParser::token::TAN;
}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 406 "yare.l"
{
	   return YL::YareParser::token::TANH;
}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 410 "yare.l"
{
	return YL::YareParser::token::FACTORIAL;
}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 414 "yare.l"
{
	return YL::YareParser::token::SUMATORIA;
}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 418 "yare.l"
{
	return YL::YareParser::token::PUSH;	
}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 422 "yare.l"
{
	return YL::YareParser::token::POP;	
}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 426 "yare.l"
{
	return YL::YareParser::token::FACE_HAPPY;
}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 430 "yare.l"
{
	return YL::YareParser::token::FACE_SAD;
}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 434 "yare.l"
{
	return YL::YareParser::token::FACE_NO;
}
	YY_BREAK
case 90:
/* rule 90 can match eol */
YY_RULE_SETUP
#line 438 "yare.l"
{
	// std::cout << "String found: '" << yytext << "'" << endl;
	char *string_final = (char *)malloc(strlen(yytext) + 1);
	string_final[0] = '\0';
    unsigned i;

    bool upper = false;
    bool lower = false;

    for(i = 0; yytext[i] != '\0'; i++) {
        if(yytext[i] == '\\') {
            switch(yytext[i + 1]) {
                case 'n':
                    append_char(string_final, '\n');
                    i++;
                    break;
                case 't':
                    append_char(string_final, '\t');
                    i++;
                    break;
                case 's':
                    append_char(string_final, ' ');
                    i++;
                    break;
                case 'b':
                    append_char(string_final, '\b');
                    i++;
                    break;
                case 'r':
                    append_char(string_final, '\r');
                    i++;
                    break;
                case 'f':
                    append_char(string_final, '\f');
                    i++;
                    break;
                case 'q':
                    append_char(string_final, '"');
                    i++;
                case '\\':
                	append_char(string_final, '\\');
                	i++;
                case 'u':
                	upper = true;
                	i++;
                    break;

                case 'l':
                	lower = true;
                	i++;
                    break;

                default:
                    if(isdigit(yytext[i + 1]) == true) {
                        unsigned n_newline = yytext[i + 1] - '0';
                        unsigned _k = 0;
                        for(_k = 0; _k < n_newline; _k++)
                            append_char(string_final, '\n');
                            i++;
                    }
            }
        } else {
            if(upper && isalpha(yytext[i])) {
            	append_char(string_final, toupper(yytext[i]));
            	upper = false;
            } else if (lower && isalpha(yytext[i])){
            	append_char(string_final, tolower(yytext[i]));
            	lower = false;
            } else {
            	append_char(string_final, yytext[i]);
            }
        }
    }
    
    remove_first_char(string_final);
    remove_last_char(string_final);

    strncpy(lexema->cadena, string_final, strlen(string_final) + 1);

	return YL::YareParser::token::CADENA;
}
	YY_BREAK
case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
#line 520 "yare.l"
{;}		/* Comentarios tipo shell, perl, python, etc */
	YY_BREAK
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
#line 521 "yare.l"
{;}		/* Comentarios estilo C++ */
	YY_BREAK
case 93:
/* rule 93 can match eol */
YY_RULE_SETUP
#line 522 "yare.l"
{;}		/* Comentarios estilo basic */
	YY_BREAK
case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
#line 523 "yare.l"
{;}		/* Comentarios estilo batch */
	YY_BREAK
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
#line 524 "yare.l"
{;}		/* Comentarios estilo SQL */
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 526 "yare.l"
{
	return *yytext;
}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 530 "yare.l"
{;}
	YY_BREAK
case 98:
/* rule 98 can match eol */
YY_RULE_SETUP
#line 531 "yare.l"
{ ; }
	YY_BREAK

case 99:
YY_RULE_SETUP
#line 534 "yare.l"
BEGIN(IN_COMMENT);
	YY_BREAK


case 100:
YY_RULE_SETUP
#line 537 "yare.l"
BEGIN(INITIAL);
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 538 "yare.l"
// eat comment in chunks
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 539 "yare.l"
// eat the lone star
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
#line 540 "yare.l"
yylineno++;
	YY_BREAK

case 104:
YY_RULE_SETUP
#line 543 "yare.l"
{ cout << "Caracter desconocido: '" << yytext << '\'' << endl; }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 545 "yare.l"
ECHO;
	YY_BREAK
#line 1719 "lex.yy.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(STRING):
case YY_STATE_EOF(IN_COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 269 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 269 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 268);

	return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

extern "C" int isatty (int );

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 545 "yare.l"



int yywrap( void ) { return 1; }
